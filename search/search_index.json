{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zend-expressive-authentication-basic Repository abandoned 2019-12-31 This repository has moved to mezzio/mezzio-authentication-basic . This library provides an HTTP Basic authentication adapter for zend-expressive-authentication , and thus PSR-7 middleware applications. Installation Run the following to install this library: $ composer require zendframework/zend-expressive-authentication-basic Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#zend-expressive-authentication-basic","text":"","title":"zend-expressive-authentication-basic"},{"location":"#repository-abandoned-2019-12-31","text":"This repository has moved to mezzio/mezzio-authentication-basic . This library provides an HTTP Basic authentication adapter for zend-expressive-authentication , and thus PSR-7 middleware applications.","title":"Repository abandoned 2019-12-31"},{"location":"#installation","text":"Run the following to install this library: $ composer require zendframework/zend-expressive-authentication-basic","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/zend-expressive-authentication-basic/v1/intro/'; });","title":"_intro"},{"location":"v1/config/","text":"Configuration To use the adapter, you will need to provide the following configuration: A valid zend-expressive-authentication UserRepositoryInterface service in your DI container. This service will perform the actual work of validating the supplied credentials. An HTTP Basic realm . This may be an arbitrary value, but is required by the specification . A response factory. If you are using Expressive, this is already configured for you. As an example of configuration: // config/autoload/authentication.global.php use Zend\\Expressive\\Authentication\\AdapterInterface; use Zend\\Expressive\\Authentication\\Basic\\BasicAccess; use Zend\\Expressive\\Authentication\\UserRepositoryInterface; use Zend\\Expressive\\Authentication\\UserRepository\\PdoDatabase; return [ 'dependencies' => [ 'aliases' => [ // Use the default PdoDatabase user repository. This assumes // you have configured that service correctly. UserRepositoryInterface::class => PdoDatabase::class, // Tell zend-expressive-authentication to use the BasicAccess // adapter: AdapterInterface::class => BasicAccess::class, ], ], 'authentication' => [ 'realm' => 'api', ], ];","title":"Configuration"},{"location":"v1/config/#configuration","text":"To use the adapter, you will need to provide the following configuration: A valid zend-expressive-authentication UserRepositoryInterface service in your DI container. This service will perform the actual work of validating the supplied credentials. An HTTP Basic realm . This may be an arbitrary value, but is required by the specification . A response factory. If you are using Expressive, this is already configured for you. As an example of configuration: // config/autoload/authentication.global.php use Zend\\Expressive\\Authentication\\AdapterInterface; use Zend\\Expressive\\Authentication\\Basic\\BasicAccess; use Zend\\Expressive\\Authentication\\UserRepositoryInterface; use Zend\\Expressive\\Authentication\\UserRepository\\PdoDatabase; return [ 'dependencies' => [ 'aliases' => [ // Use the default PdoDatabase user repository. This assumes // you have configured that service correctly. UserRepositoryInterface::class => PdoDatabase::class, // Tell zend-expressive-authentication to use the BasicAccess // adapter: AdapterInterface::class => BasicAccess::class, ], ], 'authentication' => [ 'realm' => 'api', ], ];","title":"Configuration"},{"location":"v1/intro/","text":"Introduction This component provides an HTTP Basic Authentication adapter for zend-expressive-authentication . HTTP Basic authentication utilizes the user-info section of the URL authority in order to provide credentials. While the HTTP specifications allow a single value for the user-info, most implementations require a : -separated credential, with the username first, and the password second; in fact, this is how browsers always send HTTP Basic credentials, as their prompts are always for the two values. As such, this implementation expects both a username and password in the supplied credentials . Only use in trusted networks Since HTTP Basic transmits the credentials via the URL, it should only be used within trusted networks, and never in public-facing sites, as the URL can be sniffed by MITM proxies.","title":"Introduction"},{"location":"v1/intro/#introduction","text":"This component provides an HTTP Basic Authentication adapter for zend-expressive-authentication . HTTP Basic authentication utilizes the user-info section of the URL authority in order to provide credentials. While the HTTP specifications allow a single value for the user-info, most implementations require a : -separated credential, with the username first, and the password second; in fact, this is how browsers always send HTTP Basic credentials, as their prompts are always for the two values. As such, this implementation expects both a username and password in the supplied credentials .","title":"Introduction"},{"location":"v1/usage/","text":"Usage Whenever you need an authenticated user, you can place the zend-expressive-authentication AuthenticationMiddleware in your pipeline. Globally If you need all routes to use authentication, add it globally. // In config/pipeline.php, within the callback: $app->pipe(Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class); For an entire sub-path If you need all routes that begin with a particular sub-path to require authentication, use path-segregation : // In config/pipeline.php. // In the import statements: use Zend\\Expressive\\Authentication\\AuthenticationMiddleware; // In the callback: $app->pipe('/api', $factory->path( $factory->prepare(AuthenticationMiddleware::class) )); For a specific route If you want to restrict access for a specific route, create a route-specific middleware pipeline : // In config/routes.php, in the callback: $app->get( '/path/requiring/authentication', [ Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class, HandlerRequiringAuthentication::class, // use your own handler here ] );","title":"Usage"},{"location":"v1/usage/#usage","text":"Whenever you need an authenticated user, you can place the zend-expressive-authentication AuthenticationMiddleware in your pipeline.","title":"Usage"},{"location":"v1/usage/#globally","text":"If you need all routes to use authentication, add it globally. // In config/pipeline.php, within the callback: $app->pipe(Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class);","title":"Globally"},{"location":"v1/usage/#for-an-entire-sub-path","text":"If you need all routes that begin with a particular sub-path to require authentication, use path-segregation : // In config/pipeline.php. // In the import statements: use Zend\\Expressive\\Authentication\\AuthenticationMiddleware; // In the callback: $app->pipe('/api', $factory->path( $factory->prepare(AuthenticationMiddleware::class) ));","title":"For an entire sub-path"},{"location":"v1/usage/#for-a-specific-route","text":"If you want to restrict access for a specific route, create a route-specific middleware pipeline : // In config/routes.php, in the callback: $app->get( '/path/requiring/authentication', [ Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class, HandlerRequiringAuthentication::class, // use your own handler here ] );","title":"For a specific route"}]}